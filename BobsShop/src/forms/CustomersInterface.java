package forms;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import data.*;
import elements.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.TableRowSorter;
import models.*;

/**
 * <pre>
 * The CustomersInterface class.
 *
 * For example:
 * <code>
 * JFrame frame = new JFrame("Bob's Shop");
 * frame.add(new CustomersInterface(frame, conn));
 * </code>
 * </pre>
 *
 * @author Miccio,reviewed and documented by Rudolf.
 * @see javax.swing.JPanel
 * @see models.CustomersTableModel
 * @see data
 * @see elements.Customer
 */

public class CustomersInterface extends javax.swing.JPanel {

    private final CustomersTableModel tmodel;
    private final TableRowSorter<CustomersTableModel> sort;

    private JFrame frame = null;
    private DataConnection conn = null;

    private Product topUp = null;

    /**
     * Creates new form UserInterface
     *
     * @param frame JFrame
     * @param conn DataConnection
     */
    public CustomersInterface(JFrame frame, DataConnection conn) {
        this.frame = frame;
        this.conn = conn;
        initComponents();

        tmodel = new CustomersTableModel(conn);
        sort = new TableRowSorter<>(tmodel);

        customersTable.setModel(tmodel);
        customersTable.setRowSorter(sort);

        topUp = Product.create(0, "Customer Top-Up", 0, 1, 0);
        Filter();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        addCustomer = new javax.swing.JButton();
        remCustomer = new javax.swing.JButton();
        addCredit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        assign = new javax.swing.JButton();

        customersTable.setAutoCreateRowSorter(true);
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Full Name", "Address", "Current balance"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        customersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        customersTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                customersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customersTable);

        addCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prototype/add_user.png"))); // NOI18N
        addCustomer.setText("Add new");
        addCustomer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addCustomerActionPerformed(evt);
            }
        });

        remCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prototype/Untitled.gif"))); // NOI18N
        remCustomer.setText("Delete");
        remCustomer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                remCustomerActionPerformed(evt);
            }
        });

        addCredit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prototype/Top-up-750x750.jpg"))); // NOI18N
        addCredit.setText("Top-up");
        addCredit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addCreditActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Customers overview");

        assign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prototype/rfid.gif"))); // NOI18N
        assign.setText("Assign RFID");
        assign.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                assignActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assign, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(remCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(410, 410, 410)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assign, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addCustomerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addCustomerActionPerformed
    {//GEN-HEADEREND:event_addCustomerActionPerformed
        addCustomer();
    }//GEN-LAST:event_addCustomerActionPerformed

    public void addCustomer() {
        JDialog dialog = new JDialog(frame, "Add Customer", true);
        CustomerInterfaceAdd addc = new CustomerInterfaceAdd(dialog, conn);
        dialog.add(addc);
        dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        dialog.pack();
        dialog.setVisible(true);

        //debug data
        //  System.out.println(addc.getUsername());
        //  System.out.println(addc.getUserAddress());
        //  System.out.println(addc.getUserpin());
        if (conn.addCustomer(addc.getUserpin(), addc.getUsername(), addc.getUserAddress(), addc.getUserActive()) == null) {
            JOptionPane.showMessageDialog(this, "Unable to create customer. Please check the data.", "", JOptionPane.ERROR_MESSAGE);
        }

        tmodel.update();
        tmodel.fireTableDataChanged();
    }
    private void remCustomerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_remCustomerActionPerformed
    {//GEN-HEADEREND:event_remCustomerActionPerformed
        deleteCustomer();
    }//GEN-LAST:event_remCustomerActionPerformed

    public void deleteCustomer() {
        int row = customersTable.getSelectedRow();
        if (row != -1) {
            row = customersTable.convertRowIndexToModel(row);
            Customer c = tmodel.getCustomer(row);
            conn.delCustomer(c);
            //tries to run the delete query, if it is
            //successfull, then removes the customer object and row
        }
        tmodel.update();
        tmodel.fireTableDataChanged();
    }

    private void customersTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_customersTableMouseClicked
    {//GEN-HEADEREND:event_customersTableMouseClicked
        customerEdit(evt);
    }//GEN-LAST:event_customersTableMouseClicked

    public void customerEdit(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            int row = customersTable.getSelectedRow();
            if (row != -1) {
                row = customersTable.convertRowIndexToModel(row);
                Customer customer = tmodel.getCustomer(row);

                JDialog dialog = new JDialog(frame, "Edit Customer", true);
                CustomerInterfaceEdit addp = new CustomerInterfaceEdit(dialog, conn, customer);
                dialog.add(addp);
                dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                dialog.pack();
                dialog.setVisible(true);
				
				if(addp.isCommitChanges()) {
					Customer newc = Customer.create(customer.getUserID(), addp.getUserpin(), addp.getUsername(), addp.getUseraddress(), addp.isUserActive());
					if (newc != null) {
						if (!conn.editCustomer(newc)) {
							JOptionPane.showMessageDialog(this, "Unable to edit product. Please check the data.", "", JOptionPane.ERROR_MESSAGE);
						}
					}
				}
            }
            tmodel.update();
            tmodel.fireTableDataChanged();
        }
    }

    private void addCreditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addCreditActionPerformed
    {//GEN-HEADEREND:event_addCreditActionPerformed
        addCredit();
    }//GEN-LAST:event_addCreditActionPerformed

    public void addCredit() {
        int row = customersTable.getSelectedRow();
        if (row != -1) {
            int amount;
            try {
                amount = Integer.parseInt(JOptionPane.showInputDialog("Type in the amount:"));
            } catch (NumberFormatException e) {
                amount = 0;
            }
            if (amount > 0) {
                row = customersTable.convertRowIndexToModel(row);
                Customer c = tmodel.getCustomer(row);
                ArrayList<Purchase> r = new ArrayList();
                r.add(Purchase.create(topUp, amount, 1, Purchase.FlowDirection.TOPUP));
                conn.addReceipt(c, r, new Date());
            }
        }
        tmodel.update();
        tmodel.fireTableDataChanged();
    }

    private void assignActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_assignActionPerformed
    {//GEN-HEADEREND:event_assignActionPerformed
        assignCustomer();
    }//GEN-LAST:event_assignActionPerformed

    public void assignCustomer() {
        int row = customersTable.getSelectedRow();
        if (row != -1) {
            row = customersTable.convertRowIndexToModel(row);
            Customer c = tmodel.getCustomer(row);
			//here it shall wait for a rfid card, and then update the customer's record with the card ID
			String rfid = JOptionPane.showInputDialog(this, "Type in the HEX dump of the card datablock", "Assign Customer to card", JOptionPane.PLAIN_MESSAGE);
			if(rfid.length()==32)
			{
				conn.editCustomerRFID(c, rfid);
			}
        }
        tmodel.update();
        tmodel.fireTableDataChanged();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCredit;
    private javax.swing.JButton addCustomer;
    private javax.swing.JButton assign;
    private javax.swing.JTable customersTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remCustomer;
    // End of variables declaration//GEN-END:variables

    private void Filter() {
        RowFilter<CustomersTableModel, Integer> activeFilter = new RowFilter<CustomersTableModel, Integer>() {
            @Override
            public boolean include(RowFilter.Entry<? extends CustomersTableModel, ? extends Integer> entry) {
                CustomersTableModel model = entry.getModel();
                Customer a = model.getCustomer(entry.getIdentifier());
                return a.getUserID() != 0;
            }
        };
        sort.setRowFilter(activeFilter);
    }
}
